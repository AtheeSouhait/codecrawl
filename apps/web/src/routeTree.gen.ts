/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RedirectImport } from './routes/redirect'
import { Route as marketingIndexImport } from './routes/(marketing)/index'
import { Route as AppAppImport } from './routes/app/_app'
import { Route as marketingUpdatesImport } from './routes/(marketing)/updates'
import { Route as marketingGithubImport } from './routes/(marketing)/github'
import { Route as marketingBlogImport } from './routes/(marketing)/blog'
import { Route as authAuthImport } from './routes/(auth)/_auth'
import { Route as AppAppIndexImport } from './routes/app/_app/index'
import { Route as AppAppPlaygroundImport } from './routes/app/_app/playground'
import { Route as AppAppLogsImport } from './routes/app/_app/logs'
import { Route as AppAppKeysImport } from './routes/app/_app/keys'
import { Route as authAuthSignupImport } from './routes/(auth)/_auth.signup'
import { Route as authAuthSigninImport } from './routes/(auth)/_auth.signin'

// Create Virtual Routes

const AppImport = createFileRoute('/app')()
const authImport = createFileRoute('/(auth)')()

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const authRoute = authImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const RedirectRoute = RedirectImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const marketingIndexRoute = marketingIndexImport.update({
  id: '/(marketing)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppAppRoute = AppAppImport.update({
  id: '/_app',
  getParentRoute: () => AppRoute,
} as any)

const marketingUpdatesRoute = marketingUpdatesImport.update({
  id: '/(marketing)/updates',
  path: '/updates',
  getParentRoute: () => rootRoute,
} as any)

const marketingGithubRoute = marketingGithubImport.update({
  id: '/(marketing)/github',
  path: '/github',
  getParentRoute: () => rootRoute,
} as any)

const marketingBlogRoute = marketingBlogImport.update({
  id: '/(marketing)/blog',
  path: '/blog',
  getParentRoute: () => rootRoute,
} as any)

const authAuthRoute = authAuthImport.update({
  id: '/_auth',
  getParentRoute: () => authRoute,
} as any)

const AppAppIndexRoute = AppAppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppAppRoute,
} as any)

const AppAppPlaygroundRoute = AppAppPlaygroundImport.update({
  id: '/playground',
  path: '/playground',
  getParentRoute: () => AppAppRoute,
} as any)

const AppAppLogsRoute = AppAppLogsImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => AppAppRoute,
} as any)

const AppAppKeysRoute = AppAppKeysImport.update({
  id: '/keys',
  path: '/keys',
  getParentRoute: () => AppAppRoute,
} as any)

const authAuthSignupRoute = authAuthSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => authAuthRoute,
} as any)

const authAuthSigninRoute = authAuthSigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => authAuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_auth': {
      id: '/(auth)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authAuthImport
      parentRoute: typeof authRoute
    }
    '/(marketing)/blog': {
      id: '/(marketing)/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof marketingBlogImport
      parentRoute: typeof rootRoute
    }
    '/(marketing)/github': {
      id: '/(marketing)/github'
      path: '/github'
      fullPath: '/github'
      preLoaderRoute: typeof marketingGithubImport
      parentRoute: typeof rootRoute
    }
    '/(marketing)/updates': {
      id: '/(marketing)/updates'
      path: '/updates'
      fullPath: '/updates'
      preLoaderRoute: typeof marketingUpdatesImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/app/_app': {
      id: '/app/_app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppAppImport
      parentRoute: typeof AppRoute
    }
    '/(marketing)/': {
      id: '/(marketing)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof marketingIndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_auth/signin': {
      id: '/(auth)/_auth/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof authAuthSigninImport
      parentRoute: typeof authAuthImport
    }
    '/(auth)/_auth/signup': {
      id: '/(auth)/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authAuthSignupImport
      parentRoute: typeof authAuthImport
    }
    '/app/_app/keys': {
      id: '/app/_app/keys'
      path: '/keys'
      fullPath: '/app/keys'
      preLoaderRoute: typeof AppAppKeysImport
      parentRoute: typeof AppAppImport
    }
    '/app/_app/logs': {
      id: '/app/_app/logs'
      path: '/logs'
      fullPath: '/app/logs'
      preLoaderRoute: typeof AppAppLogsImport
      parentRoute: typeof AppAppImport
    }
    '/app/_app/playground': {
      id: '/app/_app/playground'
      path: '/playground'
      fullPath: '/app/playground'
      preLoaderRoute: typeof AppAppPlaygroundImport
      parentRoute: typeof AppAppImport
    }
    '/app/_app/': {
      id: '/app/_app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppAppIndexImport
      parentRoute: typeof AppAppImport
    }
  }
}

// Create and export the route tree

interface authAuthRouteChildren {
  authAuthSigninRoute: typeof authAuthSigninRoute
  authAuthSignupRoute: typeof authAuthSignupRoute
}

const authAuthRouteChildren: authAuthRouteChildren = {
  authAuthSigninRoute: authAuthSigninRoute,
  authAuthSignupRoute: authAuthSignupRoute,
}

const authAuthRouteWithChildren = authAuthRoute._addFileChildren(
  authAuthRouteChildren,
)

interface authRouteChildren {
  authAuthRoute: typeof authAuthRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authAuthRoute: authAuthRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

interface AppAppRouteChildren {
  AppAppKeysRoute: typeof AppAppKeysRoute
  AppAppLogsRoute: typeof AppAppLogsRoute
  AppAppPlaygroundRoute: typeof AppAppPlaygroundRoute
  AppAppIndexRoute: typeof AppAppIndexRoute
}

const AppAppRouteChildren: AppAppRouteChildren = {
  AppAppKeysRoute: AppAppKeysRoute,
  AppAppLogsRoute: AppAppLogsRoute,
  AppAppPlaygroundRoute: AppAppPlaygroundRoute,
  AppAppIndexRoute: AppAppIndexRoute,
}

const AppAppRouteWithChildren =
  AppAppRoute._addFileChildren(AppAppRouteChildren)

interface AppRouteChildren {
  AppAppRoute: typeof AppAppRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  AppAppRoute: AppAppRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/redirect': typeof RedirectRoute
  '/': typeof marketingIndexRoute
  '/blog': typeof marketingBlogRoute
  '/github': typeof marketingGithubRoute
  '/updates': typeof marketingUpdatesRoute
  '/app': typeof AppAppRouteWithChildren
  '/signin': typeof authAuthSigninRoute
  '/signup': typeof authAuthSignupRoute
  '/app/keys': typeof AppAppKeysRoute
  '/app/logs': typeof AppAppLogsRoute
  '/app/playground': typeof AppAppPlaygroundRoute
  '/app/': typeof AppAppIndexRoute
}

export interface FileRoutesByTo {
  '/redirect': typeof RedirectRoute
  '/': typeof marketingIndexRoute
  '/blog': typeof marketingBlogRoute
  '/github': typeof marketingGithubRoute
  '/updates': typeof marketingUpdatesRoute
  '/app': typeof AppAppIndexRoute
  '/signin': typeof authAuthSigninRoute
  '/signup': typeof authAuthSignupRoute
  '/app/keys': typeof AppAppKeysRoute
  '/app/logs': typeof AppAppLogsRoute
  '/app/playground': typeof AppAppPlaygroundRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/redirect': typeof RedirectRoute
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_auth': typeof authAuthRouteWithChildren
  '/(marketing)/blog': typeof marketingBlogRoute
  '/(marketing)/github': typeof marketingGithubRoute
  '/(marketing)/updates': typeof marketingUpdatesRoute
  '/app': typeof AppRouteWithChildren
  '/app/_app': typeof AppAppRouteWithChildren
  '/(marketing)/': typeof marketingIndexRoute
  '/(auth)/_auth/signin': typeof authAuthSigninRoute
  '/(auth)/_auth/signup': typeof authAuthSignupRoute
  '/app/_app/keys': typeof AppAppKeysRoute
  '/app/_app/logs': typeof AppAppLogsRoute
  '/app/_app/playground': typeof AppAppPlaygroundRoute
  '/app/_app/': typeof AppAppIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/redirect'
    | '/'
    | '/blog'
    | '/github'
    | '/updates'
    | '/app'
    | '/signin'
    | '/signup'
    | '/app/keys'
    | '/app/logs'
    | '/app/playground'
    | '/app/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/redirect'
    | '/'
    | '/blog'
    | '/github'
    | '/updates'
    | '/app'
    | '/signin'
    | '/signup'
    | '/app/keys'
    | '/app/logs'
    | '/app/playground'
  id:
    | '__root__'
    | '/redirect'
    | '/(auth)'
    | '/(auth)/_auth'
    | '/(marketing)/blog'
    | '/(marketing)/github'
    | '/(marketing)/updates'
    | '/app'
    | '/app/_app'
    | '/(marketing)/'
    | '/(auth)/_auth/signin'
    | '/(auth)/_auth/signup'
    | '/app/_app/keys'
    | '/app/_app/logs'
    | '/app/_app/playground'
    | '/app/_app/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  RedirectRoute: typeof RedirectRoute
  authRoute: typeof authRouteWithChildren
  marketingBlogRoute: typeof marketingBlogRoute
  marketingGithubRoute: typeof marketingGithubRoute
  marketingUpdatesRoute: typeof marketingUpdatesRoute
  AppRoute: typeof AppRouteWithChildren
  marketingIndexRoute: typeof marketingIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  RedirectRoute: RedirectRoute,
  authRoute: authRouteWithChildren,
  marketingBlogRoute: marketingBlogRoute,
  marketingGithubRoute: marketingGithubRoute,
  marketingUpdatesRoute: marketingUpdatesRoute,
  AppRoute: AppRouteWithChildren,
  marketingIndexRoute: marketingIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/redirect",
        "/(auth)",
        "/(marketing)/blog",
        "/(marketing)/github",
        "/(marketing)/updates",
        "/app",
        "/(marketing)/"
      ]
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/(auth)": {
      "filePath": "(auth)",
      "children": [
        "/(auth)/_auth"
      ]
    },
    "/(auth)/_auth": {
      "filePath": "(auth)/_auth.tsx",
      "parent": "/(auth)",
      "children": [
        "/(auth)/_auth/signin",
        "/(auth)/_auth/signup"
      ]
    },
    "/(marketing)/blog": {
      "filePath": "(marketing)/blog.tsx"
    },
    "/(marketing)/github": {
      "filePath": "(marketing)/github.tsx"
    },
    "/(marketing)/updates": {
      "filePath": "(marketing)/updates.tsx"
    },
    "/app": {
      "filePath": "app",
      "children": [
        "/app/_app"
      ]
    },
    "/app/_app": {
      "filePath": "app/_app.tsx",
      "parent": "/app",
      "children": [
        "/app/_app/keys",
        "/app/_app/logs",
        "/app/_app/playground",
        "/app/_app/"
      ]
    },
    "/(marketing)/": {
      "filePath": "(marketing)/index.tsx"
    },
    "/(auth)/_auth/signin": {
      "filePath": "(auth)/_auth.signin.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(auth)/_auth/signup": {
      "filePath": "(auth)/_auth.signup.tsx",
      "parent": "/(auth)/_auth"
    },
    "/app/_app/keys": {
      "filePath": "app/_app/keys.tsx",
      "parent": "/app/_app"
    },
    "/app/_app/logs": {
      "filePath": "app/_app/logs.tsx",
      "parent": "/app/_app"
    },
    "/app/_app/playground": {
      "filePath": "app/_app/playground.tsx",
      "parent": "/app/_app"
    },
    "/app/_app/": {
      "filePath": "app/_app/index.tsx",
      "parent": "/app/_app"
    }
  }
}
ROUTE_MANIFEST_END */
